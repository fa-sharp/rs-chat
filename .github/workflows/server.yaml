name: Backend
on:
  push:
    branches: ["main"]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RUST_VERSION: 1.85

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./server
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        run: rustup toolchain install ${{ env.RUST_VERSION }} --profile minimal --no-self-update
      - name: Setup build dependencies on macOS
        if: startsWith(runner.os, 'macOS')
        run: brew link --force libpq
      - name: Setup rust-cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ./server
      # - name: Install nextest
      #   uses: taiki-e/install-action@v2
      #   with:
      #     tool: nextest@0.9

      - name: Run cargo check
        run: cargo check --profile ci

      - name: Run cargo build
        run: PQ_LIB_DIR="$(brew --prefix libpq)/lib" cargo build --profile ci

      # - name: Test crate
      #   run: cargo nextest run --all-features --profile ci
      # - name: Test docs
      #   run: cargo test --doc --all-features

  docker:
    name: Build & push Docker
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN  }}
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup cache
        id: cache
        uses: actions/cache@v4
        with:
          key: docker-mount-${{ hashFiles('Dockerfile') }}-${{ hashFiles('server/Cargo.lock') }}
          path: |
            ci-cache-app-target
            ci-cache-cargo-registry
            ci-cache-cargo-git
          restore-keys: |
            docker-mount-${{ hashFiles('Dockerfile') }}

      - name: Inject cache mount for Docker build
        uses: reproducible-containers/buildkit-cache-dance@v3.2.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-map: |
            {
              "ci-cache-app-target": "/app/target",
              "ci-cache-cargo-registry": "/usr/local/cargo/registry",
              "ci-cache-cargo-git": "/usr/local/cargo/git"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Build image and push to registry
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha
    #
    # - name: Generate artifact attestation
    #   uses: actions/attest-build-provenance@v2
    #   with:
    #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
    #     subject-digest: ${{ steps.push.outputs.digest }}
    #     push-to-registry: true

  # deploy:
  #   name: Deploy server
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy to Coolify
  #       run: |
  #         curl --request GET '${{ secrets.COOLIFY_WEBHOOK }}' --header 'Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}'
